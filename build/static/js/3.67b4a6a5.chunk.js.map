{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIndentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","Value","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.67b4a6a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__17sx2\"};","import React from \"react\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios.orders\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/WithErrorHandler/WithErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zip Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"fastest\" },\r\n            { value: \"cheapest\", displayValue: \"cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIndentifier in this.state.orderForm) {\r\n      formData[formElementIndentifier] =\r\n        this.state.orderForm[formElementIndentifier].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  // checkValidity(value, rules) {\r\n  //   let isValid = true;\r\n\r\n  //   if (!rules) {\r\n  //     return true;\r\n  //   }\r\n\r\n  //   if (rules.required) {\r\n  //     isValid = value.trim() !== \"\" && isValid;\r\n  //   }\r\n  //   if (rules.minLength) {\r\n  //     isValid = value.length >= rules.minLength && isValid;\r\n  //   }\r\n  //   if (rules.maxLength) {\r\n  //     isValid = value.length <= rules.maxLength && isValid;\r\n  //   }\r\n  //   return isValid;\r\n  // }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    // console.log(event.target.value);\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n  render() {\r\n    const formElementArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            Value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter Your Contact Data </h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n  // state = {\r\n  //   ingredients: null,\r\n  //   price: 0,\r\n  // };\r\n\r\n  // componentWillMount() {\r\n  //   const query = new URLSearchParams(this.props.location.search);\r\n  //   const ingredients = {};\r\n  //   let price = 0;\r\n  //   for (let param of query.entries()) {\r\n  //     if (param[0] === \"price\") {\r\n  //       price = param[1];\r\n  //     } else {\r\n  //       ingredients[param[0]] = +param[1];\r\n  //     }\r\n  //   }\r\n  //   this.setState({ ingredients: ingredients, totalPrice: price });\r\n  // }\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinedHandler}\r\n          />\r\n          <Route\r\n            path={`${this.props.match.path}/contact-data`}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1j4PD\",\"Label\":\"Input_Label__2i2Tf\",\"InputElement\":\"Input_InputElement__3haSw\",\"Invalid\":\"Input_Invalid__3FWzZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2tGr6\"};"],"sourceRoot":""}